{"version":3,"sources":["images/weather-logo.png","images/loading-indicator.gif","reducers/initialState.js","reducers/index.js","actions/types.js","store/store.js","store/configureStore.js","components/LocationSearchForm.js","components/WeatherDisplayPanel.js","components/index.js","selectors/index.js","containers/index.js","actions/index.js","serviceWorker/serviceWorker.js","index.js"],"names":["module","exports","initialState","fromJS","weatherApp","isWeatherDataLoading","hasWeatherDataLoadingError","data","reducer","state","get","action","type","setIn","payload","store","createStore","compose","applyMiddleware","thunk","apiMiddleware","devToolsEnhancer","configureStore","LocationSearchForm","fetchWeatherData","searchInput","useRef","useState","address","setAddress","handleSubmit","input","geocodeByAddress","then","results","getLatLng","latLng","catch","error","console","clearInput","current","focus","className","highlightFirstSuggestion","value","onChange","onSelect","e","getInputProps","suggestions","getSuggestionItemProps","loading","Fragment","placeholder","ref","length","map","suggestion","active","description","role","onKeyDown","keyCode","onClick","tabIndex","WeatherDisplayPanel","weatherData","src","alt","name","weather","main","parseInt","temp","icon","logo","defaultProps","WeatherApp","getWeatherData","getIn","toJS","connect","dispatch","location","createAction","endpoint","lat","lng","method","types","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.30b84b26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather-logo.f6792e41.png\";","module.exports = __webpack_public_path__ + \"static/media/loading-indicator.9f0bb82a.gif\";","import { fromJS } from 'immutable';\n\nconst initialState = fromJS({\n  weatherApp: {\n    isWeatherDataLoading: false,\n    hasWeatherDataLoadingError: false,\n    data: null\n  }\n});\n\nexport default initialState;\n","import { fromJS } from 'immutable';\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\nconst reducer = (state = initialState.get('weatherApp'), action) => {\n  switch (action.type) {\n    case types.FETCH_WEATHER_DATA:\n      return state\n        .setIn(['weatherApp', 'hasWeatherDataLoadingError'], false)\n        .setIn(['weatherApp', 'isWeatherDataLoading'], true);\n    case types.FETCH_WEATHER_DATA_SUCCESS:\n      return state\n        .setIn(['weatherApp', 'isWeatherDataLoading'], false)\n        .setIn(['weatherApp', 'data'], fromJS(action.payload));\n    case types.FETCH_WEATHER_DATA_ERROR:\n      return state\n        .setIn(['weatherApp', 'isWeatherDataLoading'], false)\n        .setIn(['weatherApp', 'hasWeatherDataLoadingError'], true);\n    default:\n      return state;\n  }\n}\n\nexport default reducer\n","export const FETCH_WEATHER_DATA = 'FETCH_WEATHER_DATA';\nexport const FETCH_WEATHER_DATA_SUCCESS = 'FETCH_WEATHER_DATA_SUCCESS';\nexport const FETCH_WEATHER_DATA_ERROR = 'FETCH_WEATHER_DATA_ERROR';\n","import configureStore from './configureStore';\nimport initialState from '../reducers/initialState';\n\nconst store = configureStore(initialState);\n\nexport default store;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { apiMiddleware } from 'redux-api-middleware';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst configureStore = (state) => {\n  return createStore(\n    reducer,\n    state,\n    compose(\n      applyMiddleware(thunk, apiMiddleware),\n      devToolsEnhancer()\n    )\n  );\n};\n\nexport default configureStore;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport { FaSearch, FaTimes } from 'react-icons/fa';\n\nimport '../styles/LocationSearchForm.css';\n\nconst LocationSearchForm = ({ fetchWeatherData }) => {\n  let searchInput = useRef(null);\n  const [address, setAddress] = useState('');\n\n  const handleChange = input => {\n    setAddress(input);\n  };\n\n  const handleSelect = (input, e) => {\n    if (e) {\n      setAddress(input);\n      handleSubmit(input);\n    }\n  };\n\n  const handleSubmit = (input) => {\n    geocodeByAddress(input)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => fetchWeatherData(latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.keyCode === 13) {\n      clearInput();\n    }\n  };\n\n  const handleClick = () => {\n    clearInput();\n  };\n\n  const clearInput = () => {\n    setAddress('');\n    searchInput.current.focus();\n  };\n\n  return (\n    <div className=\"location-search-form\">\n      <div className=\"location-search-form-input\">\n        <PlacesAutocomplete\n          highlightFirstSuggestion\n          value={address}\n          onChange={handleChange}\n          onSelect={handleSelect}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <React.Fragment>\n              <input\n                {...getInputProps({\n                  placeholder: 'Search for Town/City/Zip/Place',\n                  className: 'location-search-input',\n                  ref: searchInput\n                })}\n              />\n              {suggestions && suggestions.length > 1 &&\n                <div className=\"autocomplete-dropdown-container\">\n                  {suggestions.map(suggestion => {\n                    const className = suggestion.active\n                      ? 'suggestion-item-active'\n                      : 'suggestion-item';\n                    return (\n                      <div {...getSuggestionItemProps(suggestion, {className})}>\n                        <span>{suggestion.description}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              }\n            </React.Fragment>\n          )}\n        </PlacesAutocomplete>\n        {address ?\n          <FaTimes\n            className=\"close-icon\"\n            role=\"button\"\n            onKeyDown={handleKeyPress}\n            onClick={handleClick}\n            tabIndex=\"0\"\n          /> :\n          <FaSearch className=\"search-icon\" />\n        }\n      </div>\n    </div>\n  );\n};\n\nLocationSearchForm.propTypes = {\n  fetchWeatherData: PropTypes.func.isRequired\n};\n\nexport default LocationSearchForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport logo from '../images/weather-logo.png';\nimport loading from '../images/loading-indicator.gif';\n\nimport '../styles/WeatherDisplayPanel.css';\n\nconst WeatherDisplayPanel = ({ weatherData, isWeatherDataLoading, hasWeatherDataLoadingError }) => {\n  const renderLoadingIndicator = () => {\n    return <img className=\"loading-indicator\" src={loading} alt=\"\" />\n  };\n\n  const renderContent = () => {\n    if (hasWeatherDataLoadingError) {\n      return <span className=\"error-message\">There was a problem with your submission. Please try again.</span>\n    } else if (weatherData) {\n      return (\n        <div className=\"weather-data\">\n          <div className=\"weather-data-city\">{weatherData.name}</div>\n          <div className=\"weather-data-contitions\">{weatherData.weather[0].main}</div>\n          <div className=\"weather-data-temp\">{parseInt(weatherData.main.temp)}&deg;</div>\n          <img src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} alt=\"Weather Logo\" />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"get-started\">\n          <h1 className=\"app-title\">React Weather App</h1>\n          <img className=\"get-started-logo\" src={logo} alt=\"Get Started Logo\" />\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"weather-display-panel\">\n      {isWeatherDataLoading ?\n        renderLoadingIndicator() :\n        renderContent()\n      }\n    </div>\n  );\n};\n\nWeatherDisplayPanel.defaultProps = {\n  weatherData: null\n};\n\nWeatherDisplayPanel.propTypes = {\n  isWeatherDataLoading: PropTypes.bool.isRequired,\n  hasWeatherDataLoadingError: PropTypes.bool.isRequired,\n  weatherData: PropTypes.object\n};\n\nexport default WeatherDisplayPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LocationSearchForm from './LocationSearchForm';\nimport WeatherDisplayPanel from './WeatherDisplayPanel';\n\nimport '../styles/WeatherApp.css';\n\nconst WeatherApp = ({\n  weatherData,\n  fetchWeatherData,\n  isWeatherDataLoading,\n  hasWeatherDataLoadingError\n}) => {\n  return (\n    <div className=\"weather-app\">\n      <LocationSearchForm\n        fetchWeatherData={fetchWeatherData}\n      />\n      <WeatherDisplayPanel\n        isWeatherDataLoading={isWeatherDataLoading}\n        hasWeatherDataLoadingError={hasWeatherDataLoadingError}\n        weatherData={weatherData}\n      />\n    </div>\n  );\n};\n\nWeatherDisplayPanel.defaultProps = {\n  weatherData: null\n};\n\nWeatherApp.propTypes = {\n  isWeatherDataLoading: PropTypes.bool.isRequired,\n  hasWeatherDataLoadingError: PropTypes.bool.isRequired,\n  fetchWeatherData: PropTypes.func.isRequired,\n  weatherData: PropTypes.object\n};\n\nexport default WeatherApp;\n","export const getWeatherData = state => {\n  const weatherData = state.getIn(['weatherApp', 'data']);\n  if (weatherData) {\n    return weatherData.toJS();\n  }\n}\n\nexport const isWeatherDataLoading = state => state.getIn(['weatherApp', 'isWeatherDataLoading']);\n\nexport const hasWeatherDataLoadingError = state => state.getIn(['weatherApp', 'hasWeatherDataLoadingError']);\n","import { connect } from 'react-redux';\nimport WeatherApp from '../components';\nimport {\n  getWeatherData,\n  isWeatherDataLoading,\n  hasWeatherDataLoadingError\n} from '../selectors';\nimport { fetchWeatherData } from '../actions';\n\nconst mapStateToProps = state => ({\n  weatherData: getWeatherData(state),\n  isWeatherDataLoading: isWeatherDataLoading(state),\n  hasWeatherDataLoadingError: hasWeatherDataLoadingError(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchWeatherData: location => dispatch(fetchWeatherData(location))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherApp);\n","import { createAction } from 'redux-api-middleware';\nimport * as types from './types';\n\nexport const fetchWeatherData = (latLng) => (\n  createAction({\n    endpoint: `https://api.openweathermap.org/data/2.5/weather?lat=${latLng.lat}&lon=${latLng.lng}&units=imperial&APPID=9f37eae0ba52698e13ef6b9efcf42e37`,\n    method: 'GET',\n    types: [\n      types.FETCH_WEATHER_DATA,\n      types.FETCH_WEATHER_DATA_SUCCESS,\n      types.FETCH_WEATHER_DATA_ERROR\n    ]\n  })\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport WeatherApp from './containers';\nimport * as serviceWorker from './serviceWorker/serviceWorker';\n\nimport './styles/index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <WeatherApp />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}